---
title: "Categorize data as one of options given"
execute:
  eval: true
  freeze: true
---

```{r}
#| include: false
source("../site/knitr-print.R")
```

[R/llm-classify.R](https://github.com/mlverse/mall/blob/main/r/R/llm-classify.R)

## llm_classify

## Description
Use a Large Language Model (LLM) to classify the provided text as one of the options provided via the `labels` argument.


## Usage
```r

llm_classify(
  .data,
  col,
  labels,
  pred_name = ".classify",
  additional_prompt = ""
)

llm_vec_classify(x, labels, additional_prompt = "", preview = FALSE)
```

## Arguments
|Arguments|Description|
|---|---|
| .data | A `data.frame` or `tbl` object that contains the text to be analyzed |
| col | The name of the field to analyze, supports `tidy-eval` |
| labels | A character vector with at least 2 labels to classify the text as |
| pred_name | A character vector with the name of the new column where the prediction will be placed |
| additional_prompt | Inserts this text into the prompt sent to the LLM |
| x | A vector that contains the text to be analyzed |
| preview | It returns the R call that would have been used to run the prediction. It only returns the first record in `x`. Defaults to `FALSE` Applies to vector function only. |



## Value
`llm_classify` returns a `data.frame` or `tbl` object. `llm_vec_classify` returns a vector that is the same length as `x`.


## Examples
```{r}


library(mall)

data("reviews")

llm_use("ollama", "llama3.2", seed = 100, .silent = TRUE)

llm_classify(reviews, review, c("appliance", "computer"))

# Use 'pred_name' to customize the new column's name
llm_classify(
  reviews,
  review,
  c("appliance", "computer"),
  pred_name = "prod_type"
)

# Pass custom values for each classification
llm_classify(reviews, review, c("appliance" ~ 1, "computer" ~ 2))

# For character vectors, instead of a data frame, use this function
llm_vec_classify(
  c("this is important!", "just whenever"),
  c("urgent", "not urgent")
)

# To preview the first call that will be made to the downstream R function
llm_vec_classify(
  c("this is important!", "just whenever"),
  c("urgent", "not urgent"),
  preview = TRUE
)


```


